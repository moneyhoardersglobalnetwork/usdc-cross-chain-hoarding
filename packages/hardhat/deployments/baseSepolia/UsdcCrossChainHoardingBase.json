{
  "address": "0xfd8Ff2c739DD3dc566C6f7A060bB69663e7dA8Bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "b_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalanceForFees",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalanceUsdcForTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Hoarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pooled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UnHoarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ccipFee",
          "type": "uint256"
        }
      ],
      "name": "UsdcTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "CheckUsdcBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "Check_Usdc_Hoarded_Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DonationPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hoarder",
          "type": "address"
        }
      ],
      "name": "GetHoardingingTimeInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Hoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseHoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Hoarders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Reward_Pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Unhoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "allowanceUsdc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allowlistedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "linkBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hoarder",
          "type": "address"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hoarders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hoarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeHoarded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHoarding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "Total_AllTime_Hoarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Total_AllTime_Reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferUsdcToSepolia",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55632773afc6429f08cec6f63010ef26bd2872ca40d244568928d55b4d184b56",
  "receipt": {
    "to": null,
    "from": "0xC6452BD7d32093725F0e32607abfaF4fdc49B54F",
    "contractAddress": "0xfd8Ff2c739DD3dc566C6f7A060bB69663e7dA8Bc",
    "transactionIndex": 8,
    "gasUsed": "2424319",
    "logsBloom": "0x
    "blockHash": "0xd22688ccbad345aea906623b92f4321f41c28517e04f434f1ba8f9796bffca84",
    "transactionHash": "0x55632773afc6429f08cec6f63010ef26bd2872ca40d244568928d55b4d184b56",
    "logs": [],
    "blockNumber": 10502578,
    "cumulativeGasUsed": "3168514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD3b06cEbF099CE7DA4AcCf578aaebFDBd6e88a93",
    "0xE4aB69C077896252FAFBD49EFD26B5D171A32410"
  ],
  "numDeployments": 2,
  "solcInputHash": "1a56717702965808e7309670b5093345",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalanceForFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalanceUsdcForTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Hoarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pooled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UnHoarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ccipFee\",\"type\":\"uint256\"}],\"name\":\"UsdcTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CheckUsdcBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Check_Usdc_Hoarded_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DonationPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hoarder\",\"type\":\"address\"}],\"name\":\"GetHoardingingTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Hoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseHoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Hoarders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Reward_Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unhoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowanceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"linkBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hoarder\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hoarders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hoarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeHoarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHoarding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Total_AllTime_Hoarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Total_AllTime_Reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferUsdcToSepolia\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"- @moneyhoardermike\",\"kind\":\"dev\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a destination chain for transactions.\",\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain to be updated.\",\"allowed\":\"The allowlist status to be set for the destination chain.\"}},\"constructor\":{\"params\":{\"b_link\":\"The address of the link contract.\",\"b_router\":\"The address of the router contract.\"}}},\"title\":\"- A Hoarding contract for transferring Circle's USDC tokens from Base Sepolia to Ethereum Sepolia to any EOA address.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"constructor\":{\"notice\":\"Constructor initializes the contract with the router address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UsdcCrossChainHoardingBase.sol\":\"UsdcCrossChainHoardingBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/UsdcCrossChainHoardingBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n//CCIP imports\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n//Hoarding Contract imports\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title - A Hoarding contract for transferring Circle's USDC tokens from Base Sepolia to Ethereum Sepolia to any EOA address.\\n/// @author - @moneyhoardermike\\n/* This contract can tranfer Hoarders USDC tokens to Ethereum Sepolia \\nafter hoarder approves contract to transfer USDC tokens.\\nHoarders will be able to easily tranfer & hoard their USDC tokens across supported networks\\n and earn rewards for hoarding USDC tokens. */\\ncontract UsdcCrossChainHoardingBase is  ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct Hoarder {\\n        uint256 hoarded;\\n        uint256 timeHoarded;\\n        bool isHoarding;\\n        uint256 Total_AllTime_Hoarded;\\n        uint256 reward;\\n        uint256 Total_AllTime_Reward;\\n    }\\n\\n    mapping (address => Hoarder) public hoarders;\\n    uint256 timeHoarded;\\n    uint256 public totalHoarded = 0;\\n    uint256 public Total_Hoarders = 0;\\n    uint256 public Total_Reward_Pool;\\n\\n    event Hoarded(address indexed user, uint256 amount);\\n    event Pooled(address indexed user, uint256 amount);\\n    event UnHoarded(address indexed user);\\n\\n    \\n\\n\\n    // Custom errors to provide more descriptive revert messages.\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\\n    error NotEnoughBalanceForFees(uint256 currentBalance, uint256 calculatedFees);\\n\\n    error NotEnoughBalanceUsdcForTransfer(uint256 currentBalance);\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n    error DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\\n    error InvalidReceiverAddress(); // Used when the receiver address is 0.\\n\\n    // Event emitted when the tokens are transferred to an account on another chain.\\n    event TokensTransferred(\\n        bytes32 indexed messageId, // The unique ID of the message.\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        address receiver, // The address of the receiver on the destination chain.\\n        address token, // The token address that was transferred.\\n        uint256 tokenAmount, // The token amount that was transferred.\\n        address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees // The fees paid for sending the message.\\n    );\\n\\n    // Mapping to keep track of allowlisted destination chains.\\n    mapping(uint64 => bool) public allowlistedChains;\\n     address public owner;\\n    IRouterClient private ccipRouter;\\n\\n    IERC20 private immutable linkToken;\\n    IERC20 private immutable usdcToken;\\n    \\n\\n    // https://developers.circle.com/stablecoins/docs/usdc-on-test-networks\\n    address usdcAddress = 0x036CbD53842c5426634e7929541eC2318f3dCF7e; // USDC on Base Sepolia\\n\\n    // https://docs.chain.link/ccip/supported-networks/v1_2_0/testnet#ethereum-sepolia\\n    uint64 _destinationChainSelector = 16015286601757825753; // Sepolia\\n\\n    event UsdcTransferred(\\n        bytes32 messageId,\\n        uint64 _destinationChainSelector,\\n        address receiver,\\n        uint256 amount,\\n        uint256 ccipFee\\n    );\\n\\n    /// @notice Constructor initializes the contract with the router address.\\n    /// @param b_router The address of the router contract.\\n    /// @param b_link The address of the link contract.\\n    constructor(address b_router, address b_link) {\\n        owner = msg.sender;\\n        ccipRouter = IRouterClient(b_router);\\n        linkToken = IERC20(b_link);\\n        usdcToken = IERC20(usdcAddress);  // USDC address Sepolia\\n    }\\n\\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\\n    /// @param _destinationChainSelector The selector of the destination chain.\\n    modifier onlyAllowlistedChain(uint64 _destinationChainSelector) {\\n        if (!allowlistedChains[_destinationChainSelector])\\n            revert DestinationChainNotAllowlisted(_destinationChainSelector);\\n        _;\\n    }\\n\\n    /// @dev Modifier that checks the receiver address is not 0.\\n    /// @param _receiver The receiver address.\\n    modifier validateReceiver(address _receiver) {\\n        if (_receiver == address(0)) revert InvalidReceiverAddress();\\n        _;\\n    }\\n\\n    /// @dev Updates the allowlist status of a destination chain for transactions.\\n    /// @notice This function can only be called by the owner.\\n    /// @param _destinationChainSelector The selector of the destination chain to be updated.\\n    /// @param allowed The allowlist status to be set for the destination chain.\\n    function allowlistDestinationChain(\\n        uint64 _destinationChainSelector,\\n        bool allowed\\n    ) external onlyOwner {\\n        allowlistedChains[_destinationChainSelector] = allowed;\\n    }\\n\\n     function transferUsdcToSepolia(\\n        address _receiver,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bytes32 messageId)\\n    {\\n        Client.EVMTokenAmount[]\\n            memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\\n            token: address(usdcToken),\\n            amount: _amount\\n        });\\n        tokenAmounts[0] = tokenAmount;\\n\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver),\\n            data: \\\"\\\",\\n            tokenAmounts: tokenAmounts,\\n            extraArgs: Client._argsToBytes(\\n                Client.EVMExtraArgsV1({gasLimit: 0})\\n            ),\\n            feeToken: address(linkToken)\\n        });\\n\\n        uint256 ccipFee = ccipRouter.getFee(\\n            _destinationChainSelector,\\n            message\\n        );\\n\\n        if (ccipFee > linkToken.balanceOf(address(this)))\\n            revert NotEnoughBalanceForFees(linkToken.balanceOf(address(this)), ccipFee);\\n        linkToken.approve(address(ccipRouter), ccipFee);\\n\\n        if (_amount > usdcToken.balanceOf(msg.sender))\\n            revert NotEnoughBalanceUsdcForTransfer(usdcToken.balanceOf(msg.sender));\\n        usdcToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        usdcToken.approve(address(ccipRouter), _amount);\\n\\n        // Send CCIP Message\\n        messageId = ccipRouter.ccipSend(_destinationChainSelector, message);\\n\\n        emit UsdcTransferred(\\n            messageId,\\n            _destinationChainSelector,\\n            _receiver,\\n            _amount,\\n            ccipFee\\n        );\\n    }\\n\\n\\n    function allowanceUsdc(address account) public view returns (uint256 usdcAmount) {\\n        usdcAmount = usdcToken.allowance(account, address(this));\\n    }\\n\\n    function balancesOf(address account) public view returns (uint256 linkBalance, uint256 usdcBalance) {\\n        linkBalance =  linkToken.balanceOf(account);\\n        usdcBalance = IERC20(usdcToken).balanceOf(account);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function withdrawToken(\\n        address _beneficiary,\\n        address _token\\n    ) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount == 0) revert NothingToWithdraw();\\n        IERC20(_token).transfer(_beneficiary, amount);\\n    }\\n\\n/*Hoarding Contracts Functions*/ \\n    //Function to hoard tokens.\\n    function Hoard(uint256 _amount) external nonReentrant {\\n        require(!hoarders[msg.sender].isHoarding, \\\"Hoarder already exist\\\");\\n        require(usdcToken.balanceOf(msg.sender) >= 0, \\\"You cannot hoard more tokens than you hold and hoarding is Non-ReEntry\\\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n        hoarders[msg.sender].hoarded += _amount;\\n        hoarders[msg.sender].timeHoarded = block.timestamp;\\n        hoarders[msg.sender].isHoarding = true;\\n        hoarders[msg.sender].Total_AllTime_Hoarded += _amount;\\n        totalHoarded += _amount;\\n        Total_Hoarders += 1;\\n        emit Hoarded(msg.sender, _amount);\\n    }\\n    //Function to allow hoarders to increase their hoard.\\n    function IncreaseHoard(uint256 _amount) public  {\\n        require(usdcToken.balanceOf(msg.sender) >= 0, \\\"You cannot hoard more tokens than you hold\\\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n        hoarders[msg.sender].hoarded += _amount;\\n        hoarders[msg.sender].isHoarding = true;\\n        hoarders[msg.sender].Total_AllTime_Hoarded += _amount;\\n        totalHoarded += _amount;\\n        emit Hoarded(msg.sender, _amount);\\n    }\\n    //Function to calculate reward for current hoard.\\n    function calculateReward(address _hoarder) public view returns (uint256) {\\n        uint256 hoardingTime = block.timestamp - hoarders[_hoarder].timeHoarded;\\n        uint256 annualReward = (hoarders[_hoarder].hoarded * 6) / 100;\\n        uint256 reward = (annualReward * hoardingTime) / 31536000;  // 365 days in seconds\\n        return reward;\\n    }\\n    //Function to withdraw hoard and claim rewards\\n    function ClaimReward() public {\\n        require(hoarders[msg.sender].isHoarding == true, \\\"You cannot unhoard if you are not hoarding\\\");\\n        require(block.timestamp >= hoarders[msg.sender].timeHoarded + 6 days, \\\"You cannot Claim in the first 6 days of hoarding following the project 6 model\\\");\\n        usdcToken.transfer(msg.sender, hoarders[msg.sender].hoarded);\\n        totalHoarded -= hoarders[msg.sender].hoarded;\\n        uint256 reward = calculateReward(msg.sender);\\n        require(usdcToken.balanceOf(address(this)) >= reward, \\\"The contract does not have enough tokens to give you the reward\\\");\\n        usdcToken.transfer(msg.sender, reward);\\n        hoarders[msg.sender].Total_AllTime_Reward += reward;\\n        hoarders[msg.sender].reward += reward;\\n        hoarders[msg.sender].hoarded = 0;\\n        hoarders[msg.sender].timeHoarded = 0;\\n        hoarders[msg.sender].isHoarding = false;\\n        Total_Hoarders -= 1;\\n        Total_Reward_Pool -= reward;\\n    }\\n    //Function to withdraw hoard and claim rewards\\n    function Unhoard() public {\\n        require(hoarders[msg.sender].isHoarding == true, \\\"You cannot unhoard if you are not hoarding\\\");\\n        require(block.timestamp >= hoarders[msg.sender].timeHoarded + 6 minutes, \\\"You cannot unhoard in the first 6 minutes of hoardinging following the project 6 model\\\");\\n        usdcToken.transfer(msg.sender, hoarders[msg.sender].hoarded);\\n        totalHoarded -= hoarders[msg.sender].hoarded;\\n        uint256 reward = calculateReward(msg.sender);\\n        require(usdcToken.balanceOf(address(this)) >= reward, \\\"The contract does not have enough tokens to give you the reward\\\");\\n        usdcToken.transfer(msg.sender, reward);\\n        hoarders[msg.sender].Total_AllTime_Reward += reward;\\n        hoarders[msg.sender].reward += reward;\\n        hoarders[msg.sender].hoarded = 0;\\n        hoarders[msg.sender].timeHoarded = 0;\\n        hoarders[msg.sender].isHoarding = false;\\n        Total_Hoarders -= 1;\\n        Total_Reward_Pool -= reward;\\n    }\\n    //Read only function that checks the hoarders hoarding time in seconds.\\n    function GetHoardingingTimeInSeconds(address _hoarder) public view returns (uint256) {\\n        return block.timestamp - hoarders[_hoarder].timeHoarded;\\n    }\\n    //Read only function that checks the users non-hoarding balance.\\n    function CheckUsdcBalance(address _owner) public view returns (uint256) {\\n        return usdcToken.balanceOf(_owner);\\n    }\\n        //Read only function that checks the users hoarding balance.\\n    function Check_Usdc_Hoarded_Balance(address _owner) public view returns (uint256) {\\n        return hoarders[_owner].hoarded;\\n    }\\n    //Transfers tokens to the hoarding rewards pool as a donation the tokens can't be withdrawn!\\n    function DonationPool(uint256 _amount) public  {\\n        require(usdcToken.balanceOf(msg.sender) >= 0, \\\"You cannot pool more tokens than you hold\\\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n        Total_Reward_Pool += _amount;\\n        emit Pooled(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe21e18581e29c60cf0ce628ea33a7acef240ac15d371760f09b058ffa5f6b0b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260006003819055600455600980546001600160e01b0319167bde41ba4fc9d91ad9036cbd53842c5426634e7929541ec2318f3dcf7e1790553480156200004957600080fd5b5060405162002b3a38038062002b3a8339810160408190526200006c91620000ca565b600160005560078054336001600160a01b031991821617909155600880549091166001600160a01b0393841617905581166080526009541660a05262000102565b80516001600160a01b0381168114620000c557600080fd5b919050565b60008060408385031215620000de57600080fd5b620000e983620000ad565b9150620000f960208401620000ad565b90509250929050565b60805160a051612986620001b46000396000818161040e0152818161053d015281816106ac01528181610b7701528181610c7601528181610da401528181610f1d0152818161106601528181611236015281816114c70152818161161001528181611871015281816118f401528181611dc101528181611e7601528181611f450152611fbc015260008181611183015281816119b301528181611b6201528181611c170152611d2301526129866000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806379372f9a116100cd578063a886aafe11610081578063d82e396211610066578063d82e396214610387578063e90f1b721461039a578063fe2c5d36146103ad57600080fd5b8063a886aafe1461036b578063a98cb7f91461037457600080fd5b806396d3b83d116100b257806396d3b83d146102ca5780639ce521b3146102dd578063a06d65ad1461035857600080fd5b806379372f9a1461027d5780638da5cb5b1461028557600080fd5b80633aeac4e111610124578063559b4ca311610109578063559b4ca3146102395780635a4d2eaa146102425780636392a51f1461025557600080fd5b80633aeac4e11461021e5780633e0dc7211461023157600080fd5b80631ef516cf116101555780631ef516cf146101c057806320464d71146101d3578063355f60d21461020957600080fd5b80630afa1dd3146101715780630bb106eb1461018d575b600080fd5b61017a60045481565b6040519081526020015b60405180910390f35b6101b061019b3660046125a2565b60066020526000908152604090205460ff1681565b6040519015158152602001610184565b61017a6101ce3660046125e8565b6103c0565b61017a6101e13660046125e8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b61021c610217366004612603565b610482565b005b61021c61022c36600461261c565b610824565b61021c6109b4565b61017a60035481565b61021c610250366004612603565b610eec565b6102686102633660046125e8565b611139565b60408051928352602083019190915201610184565b61021c6112aa565b6007546102a59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610184565b61021c6102d836600461265d565b611428565b6103256102eb3660046125e8565b6001602081905260009182526040909120805491810154600282015460038301546004840154600590940154929360ff9092169290919086565b604080519687526020870195909552921515938501939093526060840152608083019190915260a082015260c001610184565b61021c610366366004612603565b611496565b61017a60055481565b61017a6103823660046125e8565b611759565b61017a6103953660046125e8565b61178c565b61017a6103a83660046125e8565b611829565b61017a6103bb366004612694565b6118a2565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e906044015b602060405180830381865afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c91906126be565b92915050565b61048a612181565b3360009081526001602052604090206002015460ff161561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f486f617264657220616c7265616479206578697374000000000000000000000060448201526064015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906126be565b1015610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6420616e6420686f617264696e67206973204e6f6e2d5260648201527f65456e7472790000000000000000000000000000000000000000000000000000608482015260a401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e91906126d7565b50336000908152600160205260408120805483929061074e908490612723565b9091555050336000908152600160208190526040822042818301556002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915560030180548392906107aa908490612723565b9250508190555080600360008282546107c39190612723565b925050819055506001600460008282546107dd9190612723565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200160405180910390a26108216001600055565b50565b60075473ffffffffffffffffffffffffffffffffffffffff16331461084857600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906126be565b905080600003610915576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906126d7565b50505050565b3360009081526001602081905260409091206002015460ff16151514610a5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e67000000000000000000000000000000000000000000006064820152608401610503565b3360009081526001602081905260409091200154610a7c90610168612723565b421015610b31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f596f752063616e6e6f7420756e686f61726420696e207468652066697273742060448201527f36206d696e75746573206f6620686f617264696e67696e6720666f6c6c6f776960648201527f6e67207468652070726f6a6563742036206d6f64656c00000000000000000000608482015260a401610503565b33600081815260016020526040908190205490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019290925260248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf991906126d7565b50336000908152600160205260408120546003805491929091610c1d908490612736565b9091555060009050610c2e3361178c565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce191906126be565b1015610d6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f54686520636f6e747261637420646f6573206e6f74206861766520656e6f756760448201527f6820746f6b656e7320746f206769766520796f752074686520726577617264006064820152608401610503565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906126d7565b503360009081526001602052604081206005018054839290610e49908490612723565b90915550503360009081526001602052604081206004018054839290610e70908490612723565b9091555050336000908152600160208190526040822082815580820183905560020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556004805491929091610ecb908490612736565b925050819055508060056000828254610ee49190612736565b909155505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d91906126be565b101561102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c6400000000000000000000000000000000000000000000006064820152608401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e891906126d7565b5080600560008282546110fb9190612723565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee91906126be565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529193507f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a391906126be565b9050915091565b3360009081526001602081905260409091206002015460ff16151514611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e67000000000000000000000000000000000000000000006064820152608401610503565b3360009081526001602081905260409091200154611373906207e900612723565b421015610b31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f596f752063616e6e6f7420436c61696d20696e2074686520666972737420362060448201527f64617973206f6620686f617264696e6720666f6c6c6f77696e6720746865207060648201527f726f6a6563742036206d6f64656c000000000000000000000000000000000000608482015260a401610503565b60075473ffffffffffffffffffffffffffffffffffffffff16331461144c57600080fd5b67ffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906126be565b10156115d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c64000000000000000000000000000000000000000000006064820152608401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561166e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169291906126d7565b5033600090815260016020526040812080548392906116b2908490612723565b909155505033600090815260016020819052604082206002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091556003018054839290611709908490612723565b9250508190555080600360008282546117229190612723565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200161112e565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602081905260408220015461047c9042612736565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602081905260408220015481906117c19042612736565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040812054919250906064906117f9906006612749565b6118039190612760565b905060006301e133806118168484612749565b6118209190612760565b95945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240161043b565b604080516001808252818301909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816118bc579050509050600060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200185815250905080826000815181106119485761194861279b565b60209081029190910101526040805160a0810190915273ffffffffffffffffffffffffffffffffffffffff861660c08201526000908060e0810160405160208183030381529060405281526020016040518060200160405280600081525081526020018481526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001611a6b6040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97a657c90000000000000000000000000000000000000000000000000000000017905290565b90526008546009546040517f20487ded00000000000000000000000000000000000000000000000000000000815292935060009273ffffffffffffffffffffffffffffffffffffffff909216916320487ded91611af0917401000000000000000000000000000000000000000090910467ffffffffffffffff16908690600401612838565b602060405180830381865afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906126be565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be291906126be565b811115611cd4576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9791906126be565b6040517f28fdcaa1000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610503565b6008546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015611d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9291906126d7565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4191906126be565b861115611f2b576040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef691906126be565b6040517f6212cf3b00000000000000000000000000000000000000000000000000000000815260040161050391815260200190565b611f6d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330896121f4565b6008546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b91906126d7565b506008546009546040517f96f4e9f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916396f4e9f9916120a9917401000000000000000000000000000000000000000090910467ffffffffffffffff16908690600401612838565b6020604051808303816000875af11580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec91906126be565b600954604080518381527401000000000000000000000000000000000000000090920467ffffffffffffffff16602083015273ffffffffffffffffffffffffffffffffffffffff8a169082015260608101889052608081018390529095507fb55a3d3f1ccd1c10f00aff03ad884028d98fa1d478fae03acecbf884ce8e8fbc9060a00160405180910390a15050505092915050565b6002600054036121ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610503565b6002600055565b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526109ae928792916000916122c7918516908490612376565b80519091501561237157808060200190518101906122e591906126d7565b612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610503565b505050565b6060612385848460008561238d565b949350505050565b60608247101561241f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610503565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612448919061294a565b60006040518083038185875af1925050503d8060008114612485576040519150601f19603f3d011682016040523d82523d6000602084013e61248a565b606091505b509150915061249b878383876124a6565b979650505050505050565b6060831561253c5782516000036125355773ffffffffffffffffffffffffffffffffffffffff85163b612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610503565b5081612385565b61238583838151156125515781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105039190612966565b803567ffffffffffffffff8116811461259d57600080fd5b919050565b6000602082840312156125b457600080fd5b6125bd82612585565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461259d57600080fd5b6000602082840312156125fa57600080fd5b6125bd826125c4565b60006020828403121561261557600080fd5b5035919050565b6000806040838503121561262f57600080fd5b612638836125c4565b9150612646602084016125c4565b90509250929050565b801515811461082157600080fd5b6000806040838503121561267057600080fd5b61267983612585565b915060208301356126898161264f565b809150509250929050565b600080604083850312156126a757600080fd5b6126b0836125c4565b946020939093013593505050565b6000602082840312156126d057600080fd5b5051919050565b6000602082840312156126e957600080fd5b81516125bd8161264f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561047c5761047c6126f4565b8181038181111561047c5761047c6126f4565b808202811582820484141761047c5761047c6126f4565b600082612796577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b838110156127e55781810151838201526020016127cd565b50506000910152565b600081518084526128068160208601602086016127ca565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a08386015261286560e08601826127ee565b9050818601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808784030160608801526128a083836127ee565b88860151888203830160808a01528051808352908601945060009350908501905b80841015612900578451805173ffffffffffffffffffffffffffffffffffffffff168352860151868301529385019360019390930192908601906128c1565b50606089015173ffffffffffffffffffffffffffffffffffffffff1660a08901526080890151888203830160c08a0152955061293c81876127ee565b9a9950505050505050505050565b6000825161295c8184602087016127ca565b9190910192915050565b6020815260006125bd60208301846127ee56fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806379372f9a116100cd578063a886aafe11610081578063d82e396211610066578063d82e396214610387578063e90f1b721461039a578063fe2c5d36146103ad57600080fd5b8063a886aafe1461036b578063a98cb7f91461037457600080fd5b806396d3b83d116100b257806396d3b83d146102ca5780639ce521b3146102dd578063a06d65ad1461035857600080fd5b806379372f9a1461027d5780638da5cb5b1461028557600080fd5b80633aeac4e111610124578063559b4ca311610109578063559b4ca3146102395780635a4d2eaa146102425780636392a51f1461025557600080fd5b80633aeac4e11461021e5780633e0dc7211461023157600080fd5b80631ef516cf116101555780631ef516cf146101c057806320464d71146101d3578063355f60d21461020957600080fd5b80630afa1dd3146101715780630bb106eb1461018d575b600080fd5b61017a60045481565b6040519081526020015b60405180910390f35b6101b061019b3660046125a2565b60066020526000908152604090205460ff1681565b6040519015158152602001610184565b61017a6101ce3660046125e8565b6103c0565b61017a6101e13660046125e8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b61021c610217366004612603565b610482565b005b61021c61022c36600461261c565b610824565b61021c6109b4565b61017a60035481565b61021c610250366004612603565b610eec565b6102686102633660046125e8565b611139565b60408051928352602083019190915201610184565b61021c6112aa565b6007546102a59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610184565b61021c6102d836600461265d565b611428565b6103256102eb3660046125e8565b6001602081905260009182526040909120805491810154600282015460038301546004840154600590940154929360ff9092169290919086565b604080519687526020870195909552921515938501939093526060840152608083019190915260a082015260c001610184565b61021c610366366004612603565b611496565b61017a60055481565b61017a6103823660046125e8565b611759565b61017a6103953660046125e8565b61178c565b61017a6103a83660046125e8565b611829565b61017a6103bb366004612694565b6118a2565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e906044015b602060405180830381865afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c91906126be565b92915050565b61048a612181565b3360009081526001602052604090206002015460ff161561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f486f617264657220616c7265616479206578697374000000000000000000000060448201526064015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906126be565b1015610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6420616e6420686f617264696e67206973204e6f6e2d5260648201527f65456e7472790000000000000000000000000000000000000000000000000000608482015260a401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e91906126d7565b50336000908152600160205260408120805483929061074e908490612723565b9091555050336000908152600160208190526040822042818301556002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915560030180548392906107aa908490612723565b9250508190555080600360008282546107c39190612723565b925050819055506001600460008282546107dd9190612723565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200160405180910390a26108216001600055565b50565b60075473ffffffffffffffffffffffffffffffffffffffff16331461084857600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906126be565b905080600003610915576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906126d7565b50505050565b3360009081526001602081905260409091206002015460ff16151514610a5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e67000000000000000000000000000000000000000000006064820152608401610503565b3360009081526001602081905260409091200154610a7c90610168612723565b421015610b31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f596f752063616e6e6f7420756e686f61726420696e207468652066697273742060448201527f36206d696e75746573206f6620686f617264696e67696e6720666f6c6c6f776960648201527f6e67207468652070726f6a6563742036206d6f64656c00000000000000000000608482015260a401610503565b33600081815260016020526040908190205490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019290925260248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf991906126d7565b50336000908152600160205260408120546003805491929091610c1d908490612736565b9091555060009050610c2e3361178c565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce191906126be565b1015610d6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f54686520636f6e747261637420646f6573206e6f74206861766520656e6f756760448201527f6820746f6b656e7320746f206769766520796f752074686520726577617264006064820152608401610503565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906126d7565b503360009081526001602052604081206005018054839290610e49908490612723565b90915550503360009081526001602052604081206004018054839290610e70908490612723565b9091555050336000908152600160208190526040822082815580820183905560020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556004805491929091610ecb908490612736565b925050819055508060056000828254610ee49190612736565b909155505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d91906126be565b101561102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c6400000000000000000000000000000000000000000000006064820152608401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e891906126d7565b5080600560008282546110fb9190612723565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee91906126be565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529193507f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a391906126be565b9050915091565b3360009081526001602081905260409091206002015460ff16151514611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e67000000000000000000000000000000000000000000006064820152608401610503565b3360009081526001602081905260409091200154611373906207e900612723565b421015610b31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f596f752063616e6e6f7420436c61696d20696e2074686520666972737420362060448201527f64617973206f6620686f617264696e6720666f6c6c6f77696e6720746865207060648201527f726f6a6563742036206d6f64656c000000000000000000000000000000000000608482015260a401610503565b60075473ffffffffffffffffffffffffffffffffffffffff16331461144c57600080fd5b67ffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906126be565b10156115d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c64000000000000000000000000000000000000000000006064820152608401610503565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561166e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169291906126d7565b5033600090815260016020526040812080548392906116b2908490612723565b909155505033600090815260016020819052604082206002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091556003018054839290611709908490612723565b9250508190555080600360008282546117229190612723565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200161112e565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602081905260408220015461047c9042612736565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602081905260408220015481906117c19042612736565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040812054919250906064906117f9906006612749565b6118039190612760565b905060006301e133806118168484612749565b6118209190612760565b95945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240161043b565b604080516001808252818301909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816118bc579050509050600060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200185815250905080826000815181106119485761194861279b565b60209081029190910101526040805160a0810190915273ffffffffffffffffffffffffffffffffffffffff861660c08201526000908060e0810160405160208183030381529060405281526020016040518060200160405280600081525081526020018481526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001611a6b6040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97a657c90000000000000000000000000000000000000000000000000000000017905290565b90526008546009546040517f20487ded00000000000000000000000000000000000000000000000000000000815292935060009273ffffffffffffffffffffffffffffffffffffffff909216916320487ded91611af0917401000000000000000000000000000000000000000090910467ffffffffffffffff16908690600401612838565b602060405180830381865afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906126be565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be291906126be565b811115611cd4576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9791906126be565b6040517f28fdcaa1000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610503565b6008546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015611d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9291906126d7565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4191906126be565b861115611f2b576040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef691906126be565b6040517f6212cf3b00000000000000000000000000000000000000000000000000000000815260040161050391815260200190565b611f6d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330896121f4565b6008546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b91906126d7565b506008546009546040517f96f4e9f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916396f4e9f9916120a9917401000000000000000000000000000000000000000090910467ffffffffffffffff16908690600401612838565b6020604051808303816000875af11580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec91906126be565b600954604080518381527401000000000000000000000000000000000000000090920467ffffffffffffffff16602083015273ffffffffffffffffffffffffffffffffffffffff8a169082015260608101889052608081018390529095507fb55a3d3f1ccd1c10f00aff03ad884028d98fa1d478fae03acecbf884ce8e8fbc9060a00160405180910390a15050505092915050565b6002600054036121ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610503565b6002600055565b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526109ae928792916000916122c7918516908490612376565b80519091501561237157808060200190518101906122e591906126d7565b612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610503565b505050565b6060612385848460008561238d565b949350505050565b60608247101561241f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610503565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612448919061294a565b60006040518083038185875af1925050503d8060008114612485576040519150601f19603f3d011682016040523d82523d6000602084013e61248a565b606091505b509150915061249b878383876124a6565b979650505050505050565b6060831561253c5782516000036125355773ffffffffffffffffffffffffffffffffffffffff85163b612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610503565b5081612385565b61238583838151156125515781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105039190612966565b803567ffffffffffffffff8116811461259d57600080fd5b919050565b6000602082840312156125b457600080fd5b6125bd82612585565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461259d57600080fd5b6000602082840312156125fa57600080fd5b6125bd826125c4565b60006020828403121561261557600080fd5b5035919050565b6000806040838503121561262f57600080fd5b612638836125c4565b9150612646602084016125c4565b90509250929050565b801515811461082157600080fd5b6000806040838503121561267057600080fd5b61267983612585565b915060208301356126898161264f565b809150509250929050565b600080604083850312156126a757600080fd5b6126b0836125c4565b946020939093013593505050565b6000602082840312156126d057600080fd5b5051919050565b6000602082840312156126e957600080fd5b81516125bd8161264f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561047c5761047c6126f4565b8181038181111561047c5761047c6126f4565b808202811582820484141761047c5761047c6126f4565b600082612796577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b838110156127e55781810151838201526020016127cd565b50506000910152565b600081518084526128068160208601602086016127ca565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a08386015261286560e08601826127ee565b9050818601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808784030160608801526128a083836127ee565b88860151888203830160808a01528051808352908601945060009350908501905b80841015612900578451805173ffffffffffffffffffffffffffffffffffffffff168352860151868301529385019360019390930192908601906128c1565b50606089015173ffffffffffffffffffffffffffffffffffffffff1660a08901526080890151888203830160c08a0152955061293c81876127ee565b9a9950505050505050505050565b6000825161295c8184602087016127ca565b9190910192915050565b6020815260006125bd60208301846127ee56fea164736f6c6343000814000a",
  "devdoc": {
    "author": "- @moneyhoardermike",
    "kind": "dev",
    "methods": {
      "allowlistDestinationChain(uint64,bool)": {
        "details": "Updates the allowlist status of a destination chain for transactions.",
        "params": {
          "_destinationChainSelector": "The selector of the destination chain to be updated.",
          "allowed": "The allowlist status to be set for the destination chain."
        }
      },
      "constructor": {
        "params": {
          "b_link": "The address of the link contract.",
          "b_router": "The address of the router contract."
        }
      }
    },
    "title": "- A Hoarding contract for transferring Circle's USDC tokens from Base Sepolia to Ethereum Sepolia to any EOA address.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowlistDestinationChain(uint64,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "constructor": {
        "notice": "Constructor initializes the contract with the router address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 956,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1069,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "hoarders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Hoarder)1064_storage)"
      },
      {
        "astId": 1071,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "timeHoarded",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1074,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "totalHoarded",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "Total_Hoarders",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "Total_Reward_Pool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1147,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "allowlistedChains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1149,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1152,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "ccipRouter",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouterClient)51"
      },
      {
        "astId": 1161,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "usdcAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1164,
        "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
        "label": "_destinationChainSelector",
        "offset": 20,
        "slot": "9",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRouterClient)51": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Hoarder)1064_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UsdcCrossChainHoardingBase.Hoarder)",
        "numberOfBytes": "32",
        "value": "t_struct(Hoarder)1064_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Hoarder)1064_storage": {
        "encoding": "inplace",
        "label": "struct UsdcCrossChainHoardingBase.Hoarder",
        "members": [
          {
            "astId": 1053,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "hoarded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1055,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "timeHoarded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1057,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "isHoarding",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1059,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "Total_AllTime_Hoarded",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1061,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1063,
            "contract": "contracts/UsdcCrossChainHoardingBase.sol:UsdcCrossChainHoardingBase",
            "label": "Total_AllTime_Reward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}